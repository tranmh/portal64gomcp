name: Portal64 MCP E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_category:
        description: 'Test category to run (all, search, detail, performance, etc.)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - administrative
          - search
          - detail
          - analysis
          - protocol
          - error_scenarios
          - performance
      skip_server_check:
        description: 'Skip server availability check'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: '1.21'
  BASE_URL: 'http://localhost:8080'
  TEST_TIMEOUT: '300s'

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.check.outputs.should-run-tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run pre-flight checks
      id: check
      run: |
        echo "Running pre-flight checks..."
        go build -o bin/portal64-mcp ./cmd/server
        echo "should-run-tests=true" >> $GITHUB_OUTPUT

  # E2E Tests with live server
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should-run-tests == 'true'
    
    services:
      # In a real setup, you might have a database service here
      # postgres:
      #   image: postgres:15
      #   env:
      #     POSTGRES_PASSWORD: testpass
      #     POSTGRES_USER: testuser
      #     POSTGRES_DB: portal64_test
      #   options: >-
      #     --health-cmd pg_isready
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
    
    strategy:
      matrix:
        test-category: 
          - administrative
          - search
          - detail
          - analysis
          - protocol
          - error_scenarios
          - performance
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build Portal64 MCP Server
      run: |
        go build -o bin/portal64-mcp ./cmd/server
        chmod +x bin/portal64-mcp
    
    - name: Start Portal64 MCP Server
      run: |
        # Start server in background
        ./bin/portal64-mcp --port 8080 --config config.yaml > server.log 2>&1 &
        echo $! > server.pid
        
        # Wait for server to be ready
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "Server is ready!"
            break
          fi
          echo "Waiting for server... attempt $i/30"
          sleep 2
        done
        
        # Verify server is running
        if ! curl -f http://localhost:8080/health >/dev/null 2>&1; then
          echo "Server failed to start!"
          cat server.log
          exit 1
        fi
    
    - name: Run E2E Tests - ${{ matrix.test-category }}
      run: |
        # Run specific test category
        if [ "${{ github.event.inputs.test_category }}" != "all" ] && [ "${{ github.event.inputs.test_category }}" != "${{ matrix.test-category }}" ]; then
          echo "Skipping ${{ matrix.test-category }} tests (running only ${{ github.event.inputs.test_category }})"
          exit 0
        fi
        
        echo "Running ${{ matrix.test-category }} tests..."
        
        # Create test results directory
        mkdir -p test-results
        
        # Run tests with proper timeout and output
        go test -v -timeout ${{ env.TEST_TIMEOUT }} \
          ./test/integration \
          -run "TestPortal64MCP_E2E.*${{ matrix.test-category }}" \
          2>&1 | tee test-results/e2e_${{ matrix.test-category }}_$(date +%Y%m%d_%H%M%S).log
        
        # Capture exit code
        TEST_EXIT_CODE=${PIPESTATUS[0]}
        
        # Generate test report
        echo "## ${{ matrix.test-category }} Tests Results" > test-results/summary_${{ matrix.test-category }}.md
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo "✅ **Status**: PASSED" >> test-results/summary_${{ matrix.test-category }}.md
        else
          echo "❌ **Status**: FAILED" >> test-results/summary_${{ matrix.test-category }}.md
        fi
        echo "**Category**: ${{ matrix.test-category }}" >> test-results/summary_${{ matrix.test-category }}.md
        echo "**Timestamp**: $(date -u)" >> test-results/summary_${{ matrix.test-category }}.md
        
        exit $TEST_EXIT_CODE
    
    - name: Run Benchmarks (Performance Category Only)
      if: matrix.test-category == 'performance'
      run: |
        echo "Running performance benchmarks..."
        go test -bench=. -benchmem -timeout 300s \
          ./test/integration \
          2>&1 | tee test-results/benchmarks_$(date +%Y%m%d_%H%M%S).log
    
    - name: Stop Portal64 MCP Server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi
        
        # Show server logs if tests failed
        if [ -f server.log ]; then
          echo "=== Server Logs ==="
          tail -100 server.log
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results-${{ matrix.test-category }}
        path: |
          test-results/
          server.log
        retention-days: 30
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-${{ matrix.test-category }}
        path: coverage.out
        retention-days: 30

  # Comprehensive test run (all categories)
  e2e-full:
    name: Full E2E Test Suite
    runs-on: ubuntu-latest
    needs: preflight
    if: github.event.inputs.test_category == 'all' || github.event.inputs.test_category == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build Portal64 MCP Server
      run: |
        go build -o bin/portal64-mcp ./cmd/server
        chmod +x bin/portal64-mcp
    
    - name: Start Portal64 MCP Server
      run: |
        ./bin/portal64-mcp --port 8080 --config config.yaml > server.log 2>&1 &
        echo $! > server.pid
        
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "Server is ready!"
            break
          fi
          sleep 2
        done
    
    - name: Run Full E2E Test Suite
      run: |
        # Make test runner executable
        chmod +x test/run_e2e_tests.sh
        
        # Run complete test suite
        ./test/run_e2e_tests.sh
    
    - name: Stop Portal64 MCP Server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi
    
    - name: Upload full test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: full-e2e-test-results
        path: |
          test-results/
          server.log
        retention-days: 30

  # Test report generation
  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [e2e-tests, e2e-full]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: Generate consolidated report
      run: |
        mkdir -p final-report
        
        # Create consolidated report
        cat > final-report/e2e-test-report.md << 'EOF'
        # Portal64 MCP Server E2E Test Report
        
        **Workflow**: ${{ github.workflow }}
        **Run ID**: ${{ github.run_id }}
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        **Timestamp**: $(date -u)
        
        ## Test Categories Status
        
        EOF
        
        # Add individual category results
        for category in administrative search detail analysis protocol error_scenarios performance; do
          if [ -d "artifacts/e2e-test-results-$category" ]; then
            echo "### $category Tests" >> final-report/e2e-test-report.md
            if [ -f "artifacts/e2e-test-results-$category/summary_$category.md" ]; then
              cat "artifacts/e2e-test-results-$category/summary_$category.md" >> final-report/e2e-test-report.md
            fi
            echo "" >> final-report/e2e-test-report.md
          fi
        done
        
        # Add full test results if available
        if [ -d "artifacts/full-e2e-test-results" ]; then
          echo "## Full Test Suite Results" >> final-report/e2e-test-report.md
          echo "Complete test suite was executed." >> final-report/e2e-test-report.md
          echo "" >> final-report/e2e-test-report.md
        fi
        
        # Add recommendations
        cat >> final-report/e2e-test-report.md << 'EOF'
        ## Recommendations
        
        - Review failed tests and address underlying issues
        - Monitor performance metrics for degradation
        - Ensure test data remains consistent and available
        - Update test cases when API changes
        
        ## Artifacts
        
        - Test logs and detailed output available in workflow artifacts
        - Server logs included for debugging failed tests
        - Benchmark results available for performance analysis
        
        ---
        *Generated by Portal64 MCP E2E Test Suite*
        EOF
    
    - name: Upload consolidated report
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-test-report
        path: final-report/
        retention-days: 90
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'final-report/e2e-test-report.md';
          
          if (fs.existsSync(path)) {
            const reportContent = fs.readFileSync(path, 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## E2E Test Results\n\n${reportContent}`
            });
          }

  # Slack notification (optional)
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [e2e-tests, e2e-full, generate-report]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Slack
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Portal64 MCP E2E Tests completed
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Status: ${{ needs.e2e-tests.result == 'success' && needs.e2e-full.result == 'success' && 'SUCCESS' || 'FAILURE' }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
